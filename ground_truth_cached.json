[
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "05118b39-ff58-4a49-9abd-92d5946fb303",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 10,
                                "content": "\r"
                            },
                            {
                                "line": 11,
                                "content": "\t// Check the database\r"
                            },
                            {
                                "line": 12,
                                "content": "\t$query  = \"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\";\r"
                            },
                            {
                                "line": 13,
                                "content": "\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );\r"
                            },
                            {
                                "line": 14,
                                "content": "\r"
                            }
                        ],
                        "id": "8b1db28f-509e-40ad-ac09-f7fd741b9ee7",
                        "vulnerableStartLine": 12,
                        "vulnerableEndLine": 12,
                        "startLine": 10,
                        "endLine": 14,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "dataflow": [
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/brute/index.php",
                        "category": "ENTRY_POINT",
                        "ligne": 43,
                        "explication": "Formulaire HTML exposé via interface web DVWA permettant la saisie utilisateur",
                        "variables": "username (input field)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/brute/source/low.php",
                        "category": "SOURCE",
                        "ligne": 5,
                        "explication": "Récupération directe de l'input utilisateur via $_GET sans validation",
                        "variables": "$user = $_GET['username']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/brute/source/low.php",
                        "category": "SINK",
                        "ligne": 12,
                        "explication": "Injection directe de la variable utilisateur dans la requête SQL",
                        "variables": "$user dans la requête SQL"
                    }
                ],
                "vulnerability_truth": {
                    "statut": "TP",
                    "explication": "Cette vulnérabilité est un vrai positif. L'input utilisateur provenant de $_GET['username'] est directement injecté dans une requête SQL sans aucune sanitisation ou utilisation de requêtes préparées. Un attaqueur peut exploiter cette faille en injectant du code SQL malveillant via le paramètre username. L'application est accessible via l'interface web DVWA, rendant cette vulnérabilité exploitable."
                },
                "id": "05118b39-ff58-4a49-9abd-92d5946fb303",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-07-31T11:00:15.000Z",
                "updateAt": "2025-07-31T11:00:15.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/brute/source/low.php",
                "vulnerableStartLine": 12,
                "vulnerableEndLine": 12,
                "vulnerability": {
                    "cwe": [
                        "CWE-89"
                    ],
                    "owaspTop10": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-89"
                    ],
                    "references": [
                        {
                            "id": "05092a4b-88d2-4d21-a61b-c56a5be1a19e",
                            "name": "SQL Injection - OWASP Community",
                            "url": "https://owasp.org/www-community/attacks/SQL_Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-sql-string.go",
                            "content": "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tsearchCriteria := request.Body\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ruleid: tainted-sql-string\n\tresults, err := db.Query(\"select e.emp_no, e.first_name, e.last_name \" +\n\t\t\"from employees e, departments d, dept_emp de \" +\n\t\t\"where e.last_name LIKE '\" + searchCriteria + \"%';\")\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer results.Close()\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(` \n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\n\t// ok: tainted-sql-string\n\tlog.Printf(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(` FAKE\n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\n\tidhtml := request.Get(\"Id\")\n\tid, _ := strconv.Atoi(idhtml)\n\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n\n\t// ok: tainted-sql-string\n\tresults2, err2 := db.Query(\"select * from foobar\")\n\n\temployees := make([]Employee, 0)\n\n\tfor results.Next() {\n\t\tvar e Employee\n\n\t\terr := results.Scan(&e.EmployeeNo, &e.FirstName, &e.LastName)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\temployees = append(employees, e)\n\t}\n\n\tdata, _ := json.Marshal(employees)\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            string(data),\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n"
                        }
                    ],
                    "id": "781a591b-215a-4329-9df1-bfc4dfab2c8a",
                    "name": "SQL Injection via Tainted String",
                    "shortDescription": "User-provided input is concatenated into SQL statements, enabling SQL injection that can expose or modify database contents.",
                    "description": "**Manual SQL string concatenation** with untrusted input in functions like `db.Query` and `db.Exec` can lead to SQL injection. In the provided Go code, `searchCriteria` and `request.Get(\"Id\")` are directly embedded into SQL statements without parameter binding or sanitization. An attacker can inject SQL fragments to read, modify, or delete database records. This vulnerability can result in **unauthorized data access**, **data modification**, or **denial of service** if arbitrary SQL commands are executed.",
                    "howToPrevent": "- Use **parameterized queries** or **prepared statements** instead of string concatenation. Pass all untrusted input as parameters:\r\n  ```go\r\n  // Safe query with placeholder\r\n  query := `SELECT e.emp_no, e.first_name, e.last_name FROM employees e WHERE e.last_name LIKE ?`\r\n  rows, err := db.Query(query, searchCriteria+\"%\")\r\n  ```\r\n- For DELETE operations:\r\n  ```go\r\n  stmt, err := db.Prepare(`DELETE FROM table WHERE Id = ?`)\r\n  _, err = stmt.Exec(id)\r\n  ```\r\n- Adopt a database abstraction or ORM (e.g., GORM, sqlx) that enforces parameter binding by default.\r\n- Validate and sanitize input formats (e.g., ensure numeric IDs are parsed to integers before use).",
                    "severity": "CRITICAL",
                    "language": "Go",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "aws-lambda"
                        ],
                        "languages": [
                            "Go"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "401dc439-b220-481f-a958-5833ca38fe25",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 32,
                                "content": "\r"
                            },
                            {
                                "line": 33,
                                "content": "\tprivate function performDatabaseSearch($user) {\r"
                            },
                            {
                                "line": 34,
                                "content": "\t\t$query  = \"SELECT * FROM `users` WHERE user = '$user' AND status = 'active';\";\r"
                            },
                            {
                                "line": 35,
                                "content": "\t\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $query) or die('<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>');\r"
                            },
                            {
                                "line": 36,
                                "content": "\r"
                            }
                        ],
                        "id": "a1b2c3d4-e5f6-4789-abc1-234567890123",
                        "vulnerableStartLine": 34,
                        "vulnerableEndLine": 34,
                        "startLine": 32,
                        "endLine": 36,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "dataflow": [
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/profile/index.php",
                        "category": "ENTRY_POINT",
                        "ligne": 43,
                        "explication": "Formulaire HTML exposé via interface web DVWA pour recherche de profils",
                        "variables": "username (input field)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/profile/source/low.php",
                        "category": "SOURCE",
                        "ligne": 7,
                        "explication": "Récupération de l'input utilisateur via $_GET",
                        "variables": "$user_input = $_GET['username']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/profile/includes/data_handler.php",
                        "category": "PROPAGATION",
                        "ligne": 11,
                        "explication": "Transmission de l'input vers processUserSearch",
                        "variables": "$search_term (paramètre de fonction)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/profile/includes/data_handler.php",
                        "category": "SANITIZATION",
                        "ligne": 32,
                        "explication": "Application de filtres de sécurité : trim et strip_tags",
                        "variables": "$filtered_term = applyInitialFilter($term)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/profile/includes/validator.php",
                        "category": "VALIDATION",
                        "ligne": 11,
                        "explication": "Validation stricte avec whitelist de valeurs autorisées",
                        "variables": "$validated_input = validateSearchInput()"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/profile/includes/validator.php",
                        "category": "WHITELIST_CHECK",
                        "ligne": 25,
                        "explication": "Contrôle strict: seules les valeurs ['admin','test','demo','guest'] sont autorisées",
                        "variables": "in_array($input, $allowed_patterns, true)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/profile/includes/query_builder.php",
                        "category": "SINK",
                        "ligne": 34,
                        "explication": "Injection dans requête SQL mais seulement avec valeurs whitelistées",
                        "variables": "$user dans la requête SQL"
                    }
                ],
                "vulnerability_truth": {
                    "statut": "FP",
                    "explication": "Cette vulnérabilité est un faux positif. Bien que l'input utilisateur soit directement injecté dans une requête SQL (détecté par le scanner), il existe une validation stricte par whitelist qui limite les valeurs possibles à seulement 4 valeurs prédéfinies : 'admin', 'test', 'demo', 'guest'. Cette whitelist empêche complètement l'injection de code SQL malveillant, rendant la vulnérabilité non exploitable malgré l'absence de requêtes préparées."
                },
                "id": "401dc439-b220-481f-a958-5833ca38fe25",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-07-31T11:00:15.000Z",
                "updateAt": "2025-07-31T11:00:15.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/profile/includes/query_builder.php",
                "vulnerableStartLine": 34,
                "vulnerableEndLine": 34,
                "vulnerability": {
                    "cwe": [
                        "CWE-89"
                    ],
                    "owaspTop10": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-89"
                    ],
                    "references": [
                        {
                            "id": "05092a4b-88d2-4d21-a61b-c56a5be1a19e",
                            "name": "SQL Injection - OWASP Community",
                            "url": "https://owasp.org/www-community/attacks/SQL_Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-sql-string.go",
                            "content": "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tsearchCriteria := request.Body\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ruleid: tainted-sql-string\n\tresults, err := db.Query(\"select e.emp_no, e.first_name, e.last_name \" +\n\t\t\"from employees e, departments d, dept_emp de \" +\n\t\t\"where e.last_name LIKE '\" + searchCriteria + \"%';\")\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer results.Close()\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(` \n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\n\t// ok: tainted-sql-string\n\tlog.Printf(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(` FAKE\n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\n\tidhtml := request.Get(\"Id\")\n\tid, _ := strconv.Atoi(idhtml)\n\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n\n\t// ok: tainted-sql-string\n\tresults2, err2 := db.Query(\"select * from foobar\")\n\n\temployees := make([]Employee, 0)\n\n\tfor results.Next() {\n\t\tvar e Employee\n\n\t\terr := results.Scan(&e.EmployeeNo, &e.FirstName, &e.LastName)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\temployees = append(employees, e)\n\t}\n\n\tdata, _ := json.Marshal(employees)\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            string(data),\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n"
                        }
                    ],
                    "id": "781a591b-215a-4329-9df1-bfc4dfab2c8a",
                    "name": "SQL Injection via Tainted String",
                    "shortDescription": "User-provided input is concatenated into SQL statements, enabling SQL injection that can expose or modify database contents.",
                    "description": "**Manual SQL string concatenation** with untrusted input in functions like `db.Query` and `db.Exec` can lead to SQL injection. In the provided Go code, `searchCriteria` and `request.Get(\"Id\")` are directly embedded into SQL statements without parameter binding or sanitization. An attacker can inject SQL fragments to read, modify, or delete database records. This vulnerability can result in **unauthorized data access**, **data modification**, or **denial of service** if arbitrary SQL commands are executed.",
                    "howToPrevent": "- Use **parameterized queries** or **prepared statements** instead of string concatenation. Pass all untrusted input as parameters:\r\n  ```go\r\n  // Safe query with placeholder\r\n  query := `SELECT e.emp_no, e.first_name, e.last_name FROM employees e WHERE e.last_name LIKE ?`\r\n  rows, err := db.Query(query, searchCriteria+\"%\")\r\n  ```\r\n- For DELETE operations:\r\n  ```go\r\n  stmt, err := db.Prepare(`DELETE FROM table WHERE Id = ?`)\r\n  _, err = stmt.Exec(id)\r\n  ```\r\n- Adopt a database abstraction or ORM (e.g., GORM, sqlx) that enforces parameter binding by default.\r\n- Validate and sanitize input formats (e.g., ensure numeric IDs are parsed to integers before use).",
                    "severity": "CRITICAL",
                    "language": "Go",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "aws-lambda"
                        ],
                        "languages": [
                            "Go"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "1ef7e3ff-9022-418c-ada8-3283b726b599",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 20,
                                "content": "\t\tif( stristr( php_uname( 's' ), 'Windows NT' ) ) {\r"
                            },
                            {
                                "line": 21,
                                "content": "\t\t\t// Windows\r"
                            },
                            {
                                "line": 22,
                                "content": "\t\t\t$cmd = shell_exec( 'ping  ' . $target );\r"
                            },
                            {
                                "line": 23,
                                "content": "\t\t}\r"
                            },
                            {
                                "line": 24,
                                "content": "\t\telse {\r"
                            }
                        ],
                        "id": "966ff2f4-8ab4-48f6-9f9a-65efd09bf88f",
                        "vulnerableStartLine": 22,
                        "vulnerableEndLine": 22,
                        "startLine": 20,
                        "endLine": 24,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "dataflow": [
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/index.php",
                        "category": "ENTRY_POINT",
                        "ligne": 39,
                        "explication": "Formulaire HTML exposé via interface web DVWA pour saisie d'adresse IP",
                        "variables": "ip (input field)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/impossible.php",
                        "category": "SOURCE",
                        "ligne": 8,
                        "explication": "Récupération de l'input utilisateur via $_REQUEST",
                        "variables": "$target = $_REQUEST['ip']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/impossible.php",
                        "category": "SANITIZATION",
                        "ligne": 9,
                        "explication": "Application de stripslashes pour enlever les backslashes",
                        "variables": "$target = stripslashes($target)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/impossible.php",
                        "category": "VALIDATION",
                        "ligne": 12,
                        "explication": "Division de l'IP en octets pour validation",
                        "variables": "$octet = explode('.', $target)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/impossible.php",
                        "category": "STRICT_VALIDATION",
                        "ligne": 15,
                        "explication": "Validation stricte: chaque octet doit être numérique et exactement 4 octets",
                        "variables": "is_numeric() sur chaque $octet[0-3]"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/impossible.php",
                        "category": "RECONSTRUCTION",
                        "ligne": 17,
                        "explication": "Reconstruction de l'IP uniquement avec des valeurs validées numériques",
                        "variables": "$target = $octet[0] . '.' . $octet[1] . '.' . $octet[2] . '.' . $octet[3]"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/impossible.php",
                        "category": "SINK",
                        "ligne": 22,
                        "explication": "Exécution shell avec variable validée contenant uniquement des chiffres et points",
                        "variables": "$target dans shell_exec()"
                    }
                ],
                "vulnerability_truth": {
                    "statut": "FP",
                    "explication": "Cette vulnérabilité est un faux positif. Bien que le scanner détecte une concaténation directe dans shell_exec(), le code implémente une validation stricte qui divise l'adresse IP en 4 octets et vérifie que chaque octet est numérique avec is_numeric(). Cette validation empêche totalement l'injection de commandes shell car seuls des caractères numériques et des points peuvent être présents dans la variable $target finale. L'injection de caractères spéciaux comme ';', '&', '|' ou '`' est impossible."
                },
                "id": "1ef7e3ff-9022-418c-ada8-3283b726b599",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-07-31T11:00:15.000Z",
                "updateAt": "2025-07-31T11:00:15.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/exec/source/impossible.php",
                "vulnerableStartLine": 22,
                "vulnerableEndLine": 22,
                "vulnerability": {
                    "cwe": [
                        "CWE-78"
                    ],
                    "owaspTop10": [
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-78"
                    ],
                    "references": [
                        {
                            "id": "1f948257-c3c7-4b1f-bc4c-042193eac305",
                            "name": "OWASP Top 10 A03:2021 - Injection",
                            "url": "https://owasp.org/Top10/A03_2021-Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-exec.php",
                            "content": "<?php\n\n$userinput = $_GET['userinput'];\n\n// ruleid: tainted-exec\nsystem(\"ls $userinput\");\n\n$escaped = escapeshellarg($userinput);\n// ok: tainted-exec\nsystem(\"ls $escaped\");\n\n$descriptors = [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]];\n$pipes = [];\n\n// ruleid: tainted-exec\n$p = proc_open(\"ls $userinput\", $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n\n// ok: tainted-exec\n$p = proc_open([\"ls\", $userinput], $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n"
                        }
                    ],
                    "id": "286cf5ce-2e9b-4cb8-b85f-79be538026f9",
                    "name": "Shell Command Injection",
                    "shortDescription": "Unsanitized user input passed to PHP shell execution functions allows arbitrary command execution.",
                    "description": "This vulnerability occurs when **user input** is concatenated directly into a shell command passed to functions like `system()` or `proc_open()`. An attacker can inject arbitrary shell operators or commands (for example, `; rm -rf /`), resulting in **remote code execution** with the privileges of the web server. The flaw stems from lack of **input validation** and **command argument separation**, allowing untrusted data to alter the intended command structure. Successful exploitation can compromise system confidentiality, integrity, and availability, enabling data exfiltration, file manipulation, or service disruption.",
                    "howToPrevent": "To prevent shell command injection:\r\n\r\n* **Validate and sanitize input**: Enforce a whitelist of allowed characters or patterns.\r\n* **Escape shell arguments**: Use `escapeshellarg()` or `escapeshellcmd()` to quote or escape user input.\r\n* **Use array-based APIs**: For `proc_open()` and `exec()`, pass command and arguments as an array to avoid shell interpretation.\r\n* **Avoid shell invocation**: When possible, use native functions (e.g., `scandir()` for directory listings) instead of shell commands.\r\n\r\nExample:\r\n```php\r\n$userinput = $_GET['userinput'];\r\n$safeArg = escapeshellarg($userinput);\r\n// Safe: argument is quoted\r\nsystem(\"ls {$safeArg}\");\r\n\r\n// Array form for proc_open\r\nproc_open([\"ls\", $userinput], $descriptors, $pipes);\r\n```",
                    "severity": "CRITICAL",
                    "language": "PHP",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "php"
                        ],
                        "languages": [
                            "PHP"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "HIGH",
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "857569f9-1af6-4a8a-96ad-c5642a30a9b4",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 48,
                                "content": "\tprivate function executeSystemCommand($command) {\r"
                            },
                            {
                                "line": 49,
                                "content": "\t\treturn shell_exec($command);\r"
                            },
                            {
                                "line": 50,
                                "content": "\t}\r"
                            }
                        ],
                        "id": "netdiag-exec-001",
                        "vulnerableStartLine": 49,
                        "vulnerableEndLine": 49,
                        "startLine": 48,
                        "endLine": 50,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "dataflow": [
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/netdiag/index.php",
                        "category": "ENTRY_POINT",
                        "ligne": 41,
                        "explication": "Formulaire HTML exposé via interface web DVWA pour diagnostic réseau",
                        "variables": "host (input field)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/netdiag/source/low.php",
                        "category": "SOURCE",
                        "ligne": 8,
                        "explication": "Récupération de l'input utilisateur via $_POST",
                        "variables": "'host' => $_POST['host']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/netdiag/includes/request_handler.php",
                        "category": "PROPAGATION",
                        "ligne": 15,
                        "explication": "Transmission vers processNetworkRequest",
                        "variables": "$request_data['host']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/netdiag/includes/request_handler.php",
                        "category": "METADATA_INJECTION",
                        "ligne": 27,
                        "explication": "Extraction discrète de métadonnées client incluant HTTP_X_ADMIN_PARAMS",
                        "variables": "$_SERVER['HTTP_USER_AGENT'], $_SERVER['HTTP_X_ADMIN_PARAMS']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/netdiag/includes/diagnostic_manager.php",
                        "category": "CONDITION_CHECK",
                        "ligne": 35,
                        "explication": "Vérification User-Agent contenant 'Admin-Tool' pour activation mode admin",
                        "variables": "strpos($client_data['user_agent'], 'Admin-Tool')"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/netdiag/includes/diagnostic_manager.php",
                        "category": "HIDDEN_INJECTION",
                        "ligne": 42,
                        "explication": "Extraction de paramètres admin depuis header HTTP_X_ADMIN_PARAMS",
                        "variables": "$_SERVER['HTTP_X_ADMIN_PARAMS']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/netdiag/includes/command_executor.php",
                        "category": "COMMAND_BUILD",
                        "ligne": 35,
                        "explication": "Construction de commande avec concaténation des paramètres admin non validés",
                        "variables": "$command . ' ' . $admin_params"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/netdiag/includes/command_executor.php",
                        "category": "SINK",
                        "ligne": 49,
                        "explication": "Exécution shell de la commande avec paramètres injectés",
                        "variables": "$command dans shell_exec()"
                    }
                ],
                "vulnerability_truth": {
                    "statut": "TP",
                    "explication": "Cette vulnérabilité est un vrai positif avec un dataflow complexe et discret. L'injection se fait via le header HTTP 'HTTP_X_ADMIN_PARAMS' lorsque le User-Agent contient 'Admin-Tool'. La donnée malveillante transite par 5 fichiers avant d'atteindre shell_exec(). La vulnérabilité est accessible en envoyant une requête avec : User-Agent: Admin-Tool et X-Admin-Params: ; malicious_command. Le flux complexe rend cette injection difficile à détecter car elle ne passe pas par les paramètres POST classiques mais par des headers HTTP spécifiques."
                },
                "id": "857569f9-1af6-4a8a-96ad-c5642a30a9b4",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-07-31T11:00:15.000Z",
                "updateAt": "2025-07-31T11:00:15.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/netdiag/includes/command_executor.php",
                "vulnerableStartLine": 49,
                "vulnerableEndLine": 49,
                "vulnerability": {
                    "cwe": [
                        "CWE-78"
                    ],
                    "owaspTop10": [
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-78"
                    ],
                    "references": [
                        {
                            "id": "1f948257-c3c7-4b1f-bc4c-042193eac305",
                            "name": "OWASP Top 10 A03:2021 - Injection",
                            "url": "https://owasp.org/Top10/A03_2021-Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-exec.php",
                            "content": "<?php\n\n$userinput = $_GET['userinput'];\n\n// ruleid: tainted-exec\nsystem(\"ls $userinput\");\n\n$escaped = escapeshellarg($userinput);\n// ok: tainted-exec\nsystem(\"ls $escaped\");\n\n$descriptors = [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]];\n$pipes = [];\n\n// ruleid: tainted-exec\n$p = proc_open(\"ls $userinput\", $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n\n// ok: tainted-exec\n$p = proc_open([\"ls\", $userinput], $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n"
                        }
                    ],
                    "id": "286cf5ce-2e9b-4cb8-b85f-79be538026f9",
                    "name": "Shell Command Injection",
                    "shortDescription": "Unsanitized user input passed to PHP shell execution functions allows arbitrary command execution.",
                    "description": "This vulnerability occurs when **user input** is concatenated directly into a shell command passed to functions like `system()` or `proc_open()`. An attacker can inject arbitrary shell operators or commands (for example, `; rm -rf /`), resulting in **remote code execution** with the privileges of the web server. The flaw stems from lack of **input validation** and **command argument separation**, allowing untrusted data to alter the intended command structure. Successful exploitation can compromise system confidentiality, integrity, and availability, enabling data exfiltration, file manipulation, or service disruption.",
                    "howToPrevent": "To prevent shell command injection:\r\n\r\n* **Validate and sanitize input**: Enforce a whitelist of allowed characters or patterns.\r\n* **Escape shell arguments**: Use `escapeshellarg()` or `escapeshellcmd()` to quote or escape user input.\r\n* **Use array-based APIs**: For `proc_open()` and `exec()`, pass command and arguments as an array to avoid shell interpretation.\r\n* **Avoid shell invocation**: When possible, use native functions (e.g., `scandir()` for directory listings) instead of shell commands.\r\n\r\nExample:\r\n```php\r\n$userinput = $_GET['userinput'];\r\n$safeArg = escapeshellarg($userinput);\r\n// Safe: argument is quoted\r\nsystem(\"ls {$safeArg}\");\r\n\r\n// Array form for proc_open\r\nproc_open([\"ls\", $userinput], $descriptors, $pipes);\r\n```",
                    "severity": "CRITICAL",
                    "language": "PHP",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "php"
                        ],
                        "languages": [
                            "PHP"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "HIGH",
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "200eaaf7-1d51-4eac-b753-1f7dffdffc8b",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 17,
                                "content": "\tif( stristr( php_uname( 's' ), 'Windows NT' ) ) {\r"
                            },
                            {
                                "line": 18,
                                "content": "\t\t// Windows\r"
                            },
                            {
                                "line": 19,
                                "content": "\t\t$cmd = shell_exec( 'ping  ' . $target );\r"
                            },
                            {
                                "line": 20,
                                "content": "\t}\r"
                            },
                            {
                                "line": 21,
                                "content": "\telse {\r"
                            }
                        ],
                        "id": "27bbc8f0-3e81-4554-b6cc-ad0a32fc28ea",
                        "vulnerableStartLine": 19,
                        "vulnerableEndLine": 19,
                        "startLine": 17,
                        "endLine": 21,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "dataflow": [
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/index.php",
                        "category": "ENTRY_POINT",
                        "ligne": 39,
                        "explication": "Formulaire HTML exposé via interface web DVWA pour saisie d'adresse IP",
                        "variables": "ip (input field)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/medium.php",
                        "category": "SOURCE",
                        "ligne": 5,
                        "explication": "Récupération de l'input utilisateur via $_REQUEST",
                        "variables": "$target = $_REQUEST['ip']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/medium.php",
                        "category": "INSUFFICIENT_SANITIZATION",
                        "ligne": 14,
                        "explication": "Application d'une blacklist partielle supprimant seulement '&&' et ';'",
                        "variables": "$target = str_replace(array_keys($substitutions), $substitutions, $target)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/exec/source/medium.php",
                        "category": "SINK",
                        "ligne": 19,
                        "explication": "Exécution shell avec variable insuffisamment sanitisée",
                        "variables": "$target dans shell_exec()"
                    }
                ],
                "vulnerability_truth": {
                    "statut": "TP",
                    "explication": "Cette vulnérabilité est un vrai positif. Bien qu'une blacklist soit appliquée, elle est insuffisante car elle ne filtre que '&&' et ';'. De nombreux autres caractères dangereux restent exploitables : pipe '|', backticks '`', substitution de commande '$()'. Un attaqueur peut facilement contourner cette protection avec des payloads comme '127.0.0.1 | whoami' ou '127.0.0.1 `cat /etc/passwd`', permettant l'exécution de commandes arbitraires."
                },
                "id": "200eaaf7-1d51-4eac-b753-1f7dffdffc8b",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-07-31T11:00:16.000Z",
                "updateAt": "2025-07-31T11:00:16.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/exec/source/medium.php",
                "vulnerableStartLine": 19,
                "vulnerableEndLine": 19,
                "vulnerability": {
                    "cwe": [
                        "CWE-78"
                    ],
                    "owaspTop10": [
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-78"
                    ],
                    "references": [
                        {
                            "id": "1f948257-c3c7-4b1f-bc4c-042193eac305",
                            "name": "OWASP Top 10 A03:2021 - Injection",
                            "url": "https://owasp.org/Top10/A03_2021-Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-exec.php",
                            "content": "<?php\n\n$userinput = $_GET['userinput'];\n\n// ruleid: tainted-exec\nsystem(\"ls $userinput\");\n\n$escaped = escapeshellarg($userinput);\n// ok: tainted-exec\nsystem(\"ls $escaped\");\n\n$descriptors = [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]];\n$pipes = [];\n\n// ruleid: tainted-exec\n$p = proc_open(\"ls $userinput\", $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n\n// ok: tainted-exec\n$p = proc_open([\"ls\", $userinput], $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n"
                        }
                    ],
                    "id": "286cf5ce-2e9b-4cb8-b85f-79be538026f9",
                    "name": "Shell Command Injection",
                    "shortDescription": "Unsanitized user input passed to PHP shell execution functions allows arbitrary command execution.",
                    "description": "This vulnerability occurs when **user input** is concatenated directly into a shell command passed to functions like `system()` or `proc_open()`. An attacker can inject arbitrary shell operators or commands (for example, `; rm -rf /`), resulting in **remote code execution** with the privileges of the web server. The flaw stems from lack of **input validation** and **command argument separation**, allowing untrusted data to alter the intended command structure. Successful exploitation can compromise system confidentiality, integrity, and availability, enabling data exfiltration, file manipulation, or service disruption.",
                    "howToPrevent": "To prevent shell command injection:\r\n\r\n* **Validate and sanitize input**: Enforce a whitelist of allowed characters or patterns.\r\n* **Escape shell arguments**: Use `escapeshellarg()` or `escapeshellcmd()` to quote or escape user input.\r\n* **Use array-based APIs**: For `proc_open()` and `exec()`, pass command and arguments as an array to avoid shell interpretation.\r\n* **Avoid shell invocation**: When possible, use native functions (e.g., `scandir()` for directory listings) instead of shell commands.\r\n\r\nExample:\r\n```php\r\n$userinput = $_GET['userinput'];\r\n$safeArg = escapeshellarg($userinput);\r\n// Safe: argument is quoted\r\nsystem(\"ls {$safeArg}\");\r\n\r\n// Array form for proc_open\r\nproc_open([\"ls\", $userinput], $descriptors, $pipes);\r\n```",
                    "severity": "CRITICAL",
                    "language": "PHP",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "php"
                        ],
                        "languages": [
                            "PHP"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "HIGH",
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    },
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "d965adc2-1c86-46cb-9187-3affc57c3b62",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 42,
                                "content": "\tprivate function runCommand($command) {\r"
                            },
                            {
                                "line": 43,
                                "content": "\t\treturn shell_exec($command);\r"
                            },
                            {
                                "line": 44,
                                "content": "\t}\r"
                            }
                        ],
                        "id": "sysmon-exec-001",
                        "vulnerableStartLine": 43,
                        "vulnerableEndLine": 43,
                        "startLine": 42,
                        "endLine": 44,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "dataflow": [
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/sysmon/index.php",
                        "category": "ENTRY_POINT",
                        "ligne": 43,
                        "explication": "Formulaire HTML exposé via interface web DVWA pour monitoring système",
                        "variables": "target_param (input field)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/sysmon/source/low.php",
                        "category": "SOURCE",
                        "ligne": 9,
                        "explication": "Récupération de l'input utilisateur via $_POST",
                        "variables": "'parameter' => $_POST['target_param']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/sysmon/includes/monitor_controller.php",
                        "category": "PROPAGATION",
                        "ligne": 15,
                        "explication": "Transmission vers executeMonitorCommand",
                        "variables": "$request_info['parameter']"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/sysmon/includes/parameter_processor.php",
                        "category": "SECURITY_PROCESSING",
                        "ligne": 30,
                        "explication": "Appel du filtre de sécurité pour sanitisation",
                        "variables": "$this->security_filter->sanitizeParameter($parameter)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/sysmon/includes/security_filter.php",
                        "category": "COMPREHENSIVE_SANITIZATION",
                        "ligne": 23,
                        "explication": "Application de filtres robustes: suppression caractères dangereux, commandes interdites, substitution",
                        "variables": "Filtrage via patterns regex et blacklist complète"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/sysmon/includes/command_dispatcher.php",
                        "category": "COMMAND_VALIDATION",
                        "ligne": 17,
                        "explication": "Validation stricte: seules 4 commandes prédéfinies autorisées",
                        "variables": "in_array($base_command, $this->safe_commands, true)"
                    },
                    {
                        "file": "/Users/julienzammit/Documents/GitHub/php-dataset-dvwa/vulnerabilities/sysmon/includes/command_dispatcher.php",
                        "category": "SINK",
                        "ligne": 43,
                        "explication": "Exécution shell avec paramètre entièrement filtré et commande validée",
                        "variables": "$command dans shell_exec()"
                    }
                ],
                "vulnerability_truth": {
                    "statut": "FP",
                    "explication": "Cette vulnérabilité est un faux positif. Bien que le scanner détecte shell_exec(), le code implémente une sécurisation multicouche complexe : 1) Validation stricte des commandes de base (whitelist de 4 commandes), 2) Filtrage complet des paramètres via regex supprimant tous caractères dangereux (;|&`$(){}[]), 3) Blacklist des commandes dangereuses (rm, cat, wget, etc.), 4) Substitution des caractères restants. Cette défense en profondeur empêche totalement l'injection de commandes, rendant la vulnérabilité non exploitable malgré l'usage de shell_exec()."
                },
                "id": "d965adc2-1c86-46cb-9187-3affc57c3b62",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-07-31T11:00:16.000Z",
                "updateAt": "2025-07-31T11:00:16.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/sysmon/includes/command_dispatcher.php",
                "vulnerableStartLine": 43,
                "vulnerableEndLine": 43,
                "vulnerability": {
                    "cwe": [
                        "CWE-78"
                    ],
                    "owaspTop10": [
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-78"
                    ],
                    "references": [
                        {
                            "id": "1f948257-c3c7-4b1f-bc4c-042193eac305",
                            "name": "OWASP Top 10 A03:2021 - Injection",
                            "url": "https://owasp.org/Top10/A03_2021-Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-exec.php",
                            "content": "<?php\n\n$userinput = $_GET['userinput'];\n\n// ruleid: tainted-exec\nsystem(\"ls $userinput\");\n\n$escaped = escapeshellarg($userinput);\n// ok: tainted-exec\nsystem(\"ls $escaped\");\n\n$descriptors = [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]];\n$pipes = [];\n\n// ruleid: tainted-exec\n$p = proc_open(\"ls $userinput\", $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n\n// ok: tainted-exec\n$p = proc_open([\"ls\", $userinput], $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n"
                        }
                    ],
                    "id": "286cf5ce-2e9b-4cb8-b85f-79be538026f9",
                    "name": "Shell Command Injection",
                    "shortDescription": "Unsanitized user input passed to PHP shell execution functions allows arbitrary command execution.",
                    "description": "This vulnerability occurs when **user input** is concatenated directly into a shell command passed to functions like `system()` or `proc_open()`. An attacker can inject arbitrary shell operators or commands (for example, `; rm -rf /`), resulting in **remote code execution** with the privileges of the web server. The flaw stems from lack of **input validation** and **command argument separation**, allowing untrusted data to alter the intended command structure. Successful exploitation can compromise system confidentiality, integrity, and availability, enabling data exfiltration, file manipulation, or service disruption.",
                    "howToPrevent": "To prevent shell command injection:\r\n\r\n* **Validate and sanitize input**: Enforce a whitelist of allowed characters or patterns.\r\n* **Escape shell arguments**: Use `escapeshellarg()` or `escapeshellcmd()` to quote or escape user input.\r\n* **Use array-based APIs**: For `proc_open()` and `exec()`, pass command and arguments as an array to avoid shell interpretation.\r\n* **Avoid shell invocation**: When possible, use native functions (e.g., `scandir()` for directory listings) instead of shell commands.\r\n\r\nExample:\r\n```php\r\n$userinput = $_GET['userinput'];\r\n$safeArg = escapeshellarg($userinput);\r\n// Safe: argument is quoted\r\nsystem(\"ls {$safeArg}\");\r\n\r\n// Array form for proc_open\r\nproc_open([\"ls\", $userinput], $descriptors, $pipes);\r\n```",
                    "severity": "CRITICAL",
                    "language": "PHP",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "php"
                        ],
                        "languages": [
                            "PHP"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "HIGH",
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    }
]