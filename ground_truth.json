[
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "73fbf8df-6abe-4c60-8671-afbf23153548",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 30,
                                "content": "\t\t\tglobal $sqlite_db_connection;\r"
                            },
                            {
                                "line": 31,
                                "content": "\r"
                            },
                            {
                                "line": 32,
                                "content": "\t\t\t$query  = \"SELECT first_name, last_name FROM users WHERE user_id = '$id';\";\r"
                            },
                            {
                                "line": 33,
                                "content": "\t\t\ttry {\r"
                            },
                            {
                                "line": 34,
                                "content": "\t\t\t\t$results = $sqlite_db_connection->query($query);\r"
                            }
                        ],
                        "id": "ed2e082e-1e02-4356-94b2-8637dcf4418e",
                        "vulnerableStartLine": 32,
                        "vulnerableEndLine": 32,
                        "startLine": 30,
                        "endLine": 34,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "73fbf8df-6abe-4c60-8671-afbf23153548",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-07-31T11:00:16.000Z",
                "updateAt": "2025-07-31T11:00:16.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/sqli_blind/source/low.php",
                "vulnerableStartLine": 32,
                "vulnerableEndLine": 32,
                "vulnerability": {
                    "cwe": [
                        "CWE-89"
                    ],
                    "owaspTop10": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-89"
                    ],
                    "references": [
                        {
                            "id": "05092a4b-88d2-4d21-a61b-c56a5be1a19e",
                            "name": "SQL Injection - OWASP Community",
                            "url": "https://owasp.org/www-community/attacks/SQL_Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-sql-string.go",
                            "content": "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tsearchCriteria := request.Body\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ruleid: tainted-sql-string\n\tresults, err := db.Query(\"select e.emp_no, e.first_name, e.last_name \" +\n\t\t\"from employees e, departments d, dept_emp de \" +\n\t\t\"where e.last_name LIKE '\" + searchCriteria + \"%';\")\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer results.Close()\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(` \n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\n\t// ok: tainted-sql-string\n\tlog.Printf(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(` FAKE\n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\n\tidhtml := request.Get(\"Id\")\n\tid, _ := strconv.Atoi(idhtml)\n\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n\n\t// ok: tainted-sql-string\n\tresults2, err2 := db.Query(\"select * from foobar\")\n\n\temployees := make([]Employee, 0)\n\n\tfor results.Next() {\n\t\tvar e Employee\n\n\t\terr := results.Scan(&e.EmployeeNo, &e.FirstName, &e.LastName)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\temployees = append(employees, e)\n\t}\n\n\tdata, _ := json.Marshal(employees)\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            string(data),\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n"
                        }
                    ],
                    "id": "781a591b-215a-4329-9df1-bfc4dfab2c8a",
                    "name": "SQL Injection via Tainted String",
                    "shortDescription": "User-provided input is concatenated into SQL statements, enabling SQL injection that can expose or modify database contents.",
                    "description": "**Manual SQL string concatenation** with untrusted input in functions like `db.Query` and `db.Exec` can lead to SQL injection. In the provided Go code, `searchCriteria` and `request.Get(\"Id\")` are directly embedded into SQL statements without parameter binding or sanitization. An attacker can inject SQL fragments to read, modify, or delete database records. This vulnerability can result in **unauthorized data access**, **data modification**, or **denial of service** if arbitrary SQL commands are executed.",
                    "howToPrevent": "- Use **parameterized queries** or **prepared statements** instead of string concatenation. Pass all untrusted input as parameters:\r\n  ```go\r\n  // Safe query with placeholder\r\n  query := `SELECT e.emp_no, e.first_name, e.last_name FROM employees e WHERE e.last_name LIKE ?`\r\n  rows, err := db.Query(query, searchCriteria+\"%\")\r\n  ```\r\n- For DELETE operations:\r\n  ```go\r\n  stmt, err := db.Prepare(`DELETE FROM table WHERE Id = ?`)\r\n  _, err = stmt.Exec(id)\r\n  ```\r\n- Adopt a database abstraction or ORM (e.g., GORM, sqlx) that enforces parameter binding by default.\r\n- Validate and sanitize input formats (e.g., ensure numeric IDs are parsed to integers before use).",
                    "severity": "CRITICAL",
                    "language": "Go",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "aws-lambda"
                        ],
                        "languages": [
                            "Go"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "file": "vulnerabilities/sqli_blind/source/low.php",
                "category": "SOURCE",
                "ligne": 5,
                "explication": "Input utilisateur récupéré depuis $_GET['id'] sans validation",
                "variables": "$_GET['id']"
            },
            {
                "file": "vulnerabilities/sqli_blind/source/low.php",
                "category": "PROPAGATION",
                "ligne": 5,
                "explication": "La variable $_GET['id'] est directement assignée à $id",
                "variables": "$id"
            },
            {
                "file": "vulnerabilities/sqli_blind/source/low.php",
                "category": "SINK",
                "ligne": 11,
                "explication": "Construction de requête SQL avec concaténation directe pour MySQL",
                "variables": "$query (MySQL branch)"
            },
            {
                "file": "vulnerabilities/sqli_blind/source/low.php",
                "category": "SINK",
                "ligne": 32,
                "explication": "Construction de requête SQL avec concaténation directe pour SQLite",
                "variables": "$query (SQLite branch)"
            },
            {
                "file": "vulnerabilities/sqli_blind/source/low.php",
                "category": "EXECUTION",
                "ligne": 13,
                "explication": "Exécution de la requête SQL via mysqli_query() pour MySQL",
                "variables": "$query"
            },
            {
                "file": "vulnerabilities/sqli_blind/source/low.php",
                "category": "EXECUTION",
                "ligne": 34,
                "explication": "Exécution de la requête SQL via SQLite query() pour SQLite",
                "variables": "$query"
            }
        ],
        "vulnerability_truth": {
            "statut": "TP",
            "explication": "Cette vulnérabilité est un VRAI POSITIF. La variable $id provient directement de $_GET['id'] sans aucune validation ou sanitisation. Elle est ensuite directement concaténée dans la requête SQL tant pour MySQL (ligne 11) que pour SQLite (ligne 32). Un attaquant peut injecter du code SQL malveillant via le paramètre 'id' (ex: 1' OR '1'='1) pour contourner la logique de la requête. Cette vulnérabilité est accessible via l'interface web DVWA au niveau de sécurité 'low' et permet des attaques de SQL Injection aveugle."
        }
    },
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "d2f7a66b-e555-4a17-a344-9c13aa66ce04",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 38,
                                "content": "        global $sqlite_db_connection;\r"
                            },
                            {
                                "line": 39,
                                "content": "\r"
                            },
                            {
                                "line": 40,
                                "content": "        $query = \"SELECT first_name, last_name FROM users WHERE user_id = '$parameters[0]';\";\r"
                            },
                            {
                                "line": 41,
                                "content": "\r"
                            },
                            {
                                "line": 42,
                                "content": "        $stmt = $sqlite_db_connection->prepare($query_template);\r"
                            }
                        ],
                        "id": "d2f7a66b-e555-4a17-a344-9c13aa66ce04",
                        "vulnerableStartLine": 40,
                        "vulnerableEndLine": 40,
                        "startLine": 38,
                        "endLine": 42,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "d2f7a66b-e555-4a17-a344-9c13aa66ce04",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-08-02T16:00:00.000Z",
                "updateAt": "2025-08-02T16:00:00.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/profileanalyzer/includes/database_adapter.php",
                "vulnerableStartLine": 40,
                "vulnerableEndLine": 40,
                "vulnerability": {
                    "cwe": [
                        "CWE-89"
                    ],
                    "owaspTop10": [
                        "A01:2017 - Injection",
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-89"
                    ],
                    "references": [
                        {
                            "id": "05092a4b-88d2-4d21-a61b-c56a5be1a19e",
                            "name": "SQL Injection - OWASP Community",
                            "url": "https://owasp.org/www-community/attacks/SQL_Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-sql-string.go",
                            "content": "<?php\n\n$data = $_GET[\"data\"];\n// ruleid: tainted-sql-string\n$query = \"SELECT * FROM users WHERE id = '$data'\";\n\n// ok: tainted-sql-string\n$query = \"SELECT * FROM users WHERE id = ?\";\n"
                        }
                    ],
                    "id": "781a591b-215a-4329-9df1-bfc4dfab2c8a",
                    "name": "SQL Injection via Tainted String",
                    "shortDescription": "User-provided input is concatenated into SQL statements, enabling SQL injection that can expose or modify database contents.",
                    "description": "**Manual SQL string concatenation** with untrusted input in functions like `db.Query` and `db.Exec` can lead to SQL injection. In the provided Go code, `searchCriteria` and `request.Get(\"Id\")` are directly embedded into SQL statements without parameter binding or sanitization. An attacker can inject SQL fragments to read, modify, or delete database records. This vulnerability can result in **unauthorized data access**, **data modification**, or **denial of service** if arbitrary SQL commands are executed.",
                    "howToPrevent": "- Use **parameterized queries** or **prepared statements** instead of string concatenation. Pass all untrusted input as parameters:\r\n  ```go\r\n  // Safe query with placeholder\r\n  query := `SELECT e.emp_no, e.first_name, e.last_name FROM employees e WHERE e.last_name LIKE ?`\r\n  rows, err := db.Query(query, searchCriteria+\"%\")\r\n  ```\r\n- For DELETE operations:\r\n  ```go\r\n  stmt, err := db.Prepare(`DELETE FROM table WHERE Id = ?`)\r\n  _, err = stmt.Exec(id)\r\n  ```\r\n- Adopt a database abstraction or ORM (e.g., GORM, sqlx) that enforces parameter binding by default.\r\n- Validate and sanitize input formats (e.g., ensure numeric IDs are parsed to integers before use).",
                    "severity": "CRITICAL",
                    "language": "Go",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "aws-lambda"
                        ],
                        "languages": [
                            "Go"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "MEDIUM",
                        "likelihood": "HIGH"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast",
        "dataflow": [
            {
                "file": "vulnerabilities/profileanalyzer/index.php",
                "category": "SOURCE",
                "ligne": 17,
                "explication": "Input utilisateur via $_POST['user_identifier'] depuis le formulaire",
                "variables": "$_POST['user_identifier']"
            },
            {
                "file": "vulnerabilities/profileanalyzer/includes/profile_manager.php",
                "category": "PROPAGATION",
                "ligne": 18,
                "explication": "La variable user_identifier est passée à performAnalysis()",
                "variables": "$user_identifier"
            },
            {
                "file": "vulnerabilities/profileanalyzer/includes/profile_manager.php",
                "category": "VALIDATION_MULTICOUCHE",
                "ligne": 23,
                "explication": "Validation stricte via IdentifierValidator avec patterns et blacklist",
                "variables": "$processed_request"
            },
            {
                "file": "vulnerabilities/profileanalyzer/includes/request_processor.php",
                "category": "SANITISATION",
                "ligne": 21,
                "explication": "Processing avec intval() pour numérique et htmlspecialchars() pour strings",
                "variables": "$processed_identifier"
            },
            {
                "file": "vulnerabilities/profileanalyzer/includes/query_builder.php",
                "category": "TEMPLATE_SECURISE",
                "ligne": 12,
                "explication": "Utilisation de templates avec placeholders préparés",
                "variables": "$query_template"
            },
            {
                "file": "vulnerabilities/profileanalyzer/includes/database_adapter.php",
                "category": "PREPARED_STATEMENT",
                "ligne": 42,
                "explication": "Prepared statement avec bindValue() - la ligne 40 avec concaténation n'est jamais exécutée",
                "variables": "$stmt"
            },
            {
                "file": "vulnerabilities/profileanalyzer/includes/database_adapter.php",
                "category": "EXECUTION_SECURISEE",
                "ligne": 47,
                "explication": "Execution du prepared statement avec paramètres liés",
                "variables": "$result"
            }
        ],
        "vulnerability_truth": {
            "statut": "FP",
            "explication": "Cette vulnérabilité est un FAUX POSITIF. Bien que la ligne 40 contienne une concaténation SQL apparemment vulnérable, cette ligne n'est jamais exécutée et semble être du code mort ou un artifact. Le vrai flux d'exécution utilise des prepared statements sécurisés : 1) Validation multicouche avec patterns regex et blacklist de mots SQL, 2) Sanitisation avec intval() et htmlspecialchars(), 3) Templates avec placeholders, 4) Prepared statements avec bindValue(). Les données utilisateur sont entièrement isolées de la structure SQL. L'exploitation est impossible grâce aux multiples couches de sécurité."
        }
    }
]