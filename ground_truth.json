[
    {
        "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
        "vulnerabilityId": "1ef7e3ff-9022-418c-ada8-3283b726b599",
        "sast": {
            "base": {
                "codeSnippets": [
                    {
                        "code": [
                            {
                                "line": 20,
                                "content": "\t\tif( stristr( php_uname( 's' ), 'Windows NT' ) ) {\r"
                            },
                            {
                                "line": 21,
                                "content": "\t\t\t// Windows\r"
                            },
                            {
                                "line": 22,
                                "content": "\t\t\t$cmd = shell_exec( 'ping  ' . $target );\r"
                            },
                            {
                                "line": 23,
                                "content": "\t\t}\r"
                            },
                            {
                                "line": 24,
                                "content": "\t\telse {\r"
                            }
                        ],
                        "id": "966ff2f4-8ab4-48f6-9f9a-65efd09bf88f",
                        "vulnerableStartLine": 22,
                        "vulnerableEndLine": 22,
                        "startLine": 20,
                        "endLine": 24,
                        "language": "PHP",
                        "fixAnalysis": "",
                        "fixAnalysisDescription": ""
                    }
                ],
                "id": "1ef7e3ff-9022-418c-ada8-3283b726b599",
                "projectId": "11d7e4ac-b1f9-4f10-b492-36343db012b9",
                "createdAt": "2025-07-31T11:00:15.000Z",
                "updateAt": "2025-07-31T11:00:15.000Z",
                "timeToFix": "",
                "currentState": "to_verify",
                "currentSeverity": "CRITICAL",
                "currentPriority": "critical_urgent",
                "contextualExplanation": "",
                "language": "PHP",
                "path": "DVWA-master/vulnerabilities/exec/source/impossible.php",
                "vulnerableStartLine": 22,
                "vulnerableEndLine": 22,
                "vulnerability": {
                    "cwe": [
                        "CWE-78"
                    ],
                    "owaspTop10": [
                        "A03:2021 - Injection"
                    ],
                    "cweArray": [
                        "CWE-78"
                    ],
                    "references": [
                        {
                            "id": "1f948257-c3c7-4b1f-bc4c-042193eac305",
                            "name": "OWASP Top 10 A03:2021 - Injection",
                            "url": "https://owasp.org/Top10/A03_2021-Injection"
                        }
                    ],
                    "codeExamples": [
                        {
                            "filename": "tainted-exec.php",
                            "content": "<?php\n\n$userinput = $_GET['userinput'];\n\n// ruleid: tainted-exec\nsystem(\"ls $userinput\");\n\n$escaped = escapeshellarg($userinput);\n// ok: tainted-exec\nsystem(\"ls $escaped\");\n\n$descriptors = [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]];\n$pipes = [];\n\n// ruleid: tainted-exec\n$p = proc_open(\"ls $userinput\", $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n\n// ok: tainted-exec\n$p = proc_open([\"ls\", $userinput], $descriptors, $pipes);\necho stream_get_contents($pipes[1]);\n"
                        }
                    ],
                    "id": "286cf5ce-2e9b-4cb8-b85f-79be538026f9",
                    "name": "Shell Command Injection",
                    "shortDescription": "Unsanitized user input passed to PHP shell execution functions allows arbitrary command execution.",
                    "description": "This vulnerability occurs when **user input** is concatenated directly into a shell command passed to functions like `system()` or `proc_open()`. An attacker can inject arbitrary shell operators or commands (for example, `; rm -rf /`), resulting in **remote code execution** with the privileges of the web server. The flaw stems from lack of **input validation** and **command argument separation**, allowing untrusted data to alter the intended command structure. Successful exploitation can compromise system confidentiality, integrity, and availability, enabling data exfiltration, file manipulation, or service disruption.",
                    "howToPrevent": "To prevent shell command injection:\r\n\r\n* **Validate and sanitize input**: Enforce a whitelist of allowed characters or patterns.\r\n* **Escape shell arguments**: Use `escapeshellarg()` or `escapeshellcmd()` to quote or escape user input.\r\n* **Use array-based APIs**: For `proc_open()` and `exec()`, pass command and arguments as an array to avoid shell interpretation.\r\n* **Avoid shell invocation**: When possible, use native functions (e.g., `scandir()` for directory listings) instead of shell commands.\r\n\r\nExample:\r\n```php\r\n$userinput = $_GET['userinput'];\r\n$safeArg = escapeshellarg($userinput);\r\n// Safe: argument is quoted\r\nsystem(\"ls {$safeArg}\");\r\n\r\n// Array form for proc_open\r\nproc_open([\"ls\", $userinput], $descriptors, $pipes);\r\n```",
                    "severity": "CRITICAL",
                    "language": "PHP",
                    "vulnerabilityType": "sast",
                    "cvss3": {
                        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                        "baseScore": "9.8"
                    },
                    "_cvss3": "cvss3",
                    "sourceMetadata": {
                        "subcategory": [
                            "vuln"
                        ],
                        "technology": [
                            "php"
                        ],
                        "languages": [
                            "PHP"
                        ],
                        "category": "security",
                        "confidence": "MEDIUM",
                        "impact": "HIGH",
                        "likelihood": "MEDIUM"
                    },
                    "_sourceMetadata": "sourceMetadata"
                },
                "historyItems": {
                    "items": []
                },
                "vulnerabilityType": "sast"
            }
        },
        "vulnerability": "sast"
    }
]